#include <algorithm>
#include <climits>
#include <cmath>
#include <cstring>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <functional> 
using namespace std;
#include <random>

struct Node {
    int x = 0;
    int y = 0;
    int h = 0;
    Node(int x = 0, int y = 0, int h = 0) : x(x), y(y), h(h){}
    bool operator<(const Node & b) const {
        return this->h > b.h;
    }
};

class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        if (heightMap.size() == 0 || heightMap[0].size() == 0) return 0; 
        int result = 0;
        int row = heightMap.size(), col = heightMap[0].size();
        vector<vector<int>> discovered(row, vector<int>(col, 0));
        priority_queue<Node, vector<Node>> pq;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (i == 0 || j == 0 || i == row-1 || j == col-1) {
                    pq.push(Node(i, j, heightMap[i][j]));
                    discovered[i][j] = 1;
                }
            }
        }
        vector<int> dx = {0, 0, -1, 1};
        vector<int> dy = {-1, 1, 0, 0};
        while (!pq.empty()) {
            Node tmp = pq.top(); pq.pop();
            for (int i = 0; i < dx.size(); i++) {
                int a = tmp.x + dx[i], b = tmp.y + dy[i];
                if (a >= 0 && a < row && b >= 0 && b < col && !discovered[a][b]) {
                    if (heightMap[a][b] < tmp.h) {
                        result += tmp.h - heightMap[a][b];
                    }
                    discovered[a][b] = 1;
                    pq.push(Node(a, b, max(heightMap[a][b], tmp.h)));

                }

            }
        }
        return result;
    }
};